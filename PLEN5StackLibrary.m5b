{"category":"PLEN5Stack","color":"#00a654","blocks":["__PLEN5Stack_Setup","__PLEN5Stack_Motion","__PLEN5Stack_BasicMotionMemo","__PLEN5Stack_DanceMotionMemo","__PLEN5Stack_SoccerMotionMemo","__PLEN5Stack_Servo","__PLEN5Stack_BothLED","__PLEN5Stack_RightLED","__PLEN5Stack_LeftLED"],"jscode":"// Block __PLEN5Stack_Setup\nvar __PLEN5Stack_Setup_json = {\n    \"previousStatement\": null,\n    \"nextStatement\": null,\n    \"message0\": \"%1\",\n    \"args0\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"PLEN5Stackのセットアップ\"\n        }\n    ],\n    \"colour\": \"#00a654\"\n};\n\nwindow['Blockly'].Blocks['__PLEN5Stack_Setup'] = {\n    init: function() {\n        this.jsonInit(__PLEN5Stack_Setup_json);\n    }\n};\n\nwindow['Blockly'].Python['__PLEN5Stack_Setup'] = function(block) {\n        return `#インポート\nfrom machine import Pin, I2C\nimport re\nimport math\nimport machine, neopixel\n\n#変数の定義\nServoDefaultValue = [1400, 1060, 780, 1080, 680, 1050, 1500, 1220] #標準よりもずれている(?)\n#ServoDefaultValue = [1000, 630, 300, 600, 240, 600, 1000, 720]\nMotionCache = []\nCurrentLEDValue = [(0,0,0),(0,0,0)]\nServoCurrentValue = [0] * 8\nServoBeforeValue = [0] * 8\ni2c = I2C(scl=Pin(22), sda=Pin(21), freq=400000)\nnp = neopixel.NeoPixel(machine.Pin(26), 2)\nglobal MotionCount\nMotionCount = 0\n\nfor i in range(8):\n  ServoCurrentValue[i] = ServoDefaultValue[i]\n\n#関数の定義\ndef write8(addr, value):\n  cmd = bytearray(2)\n  cmd[0] = addr\n  cmd[1] = value\n  i2c.writeto(0x6A, cmd)\n\ndef servoWrite(num, degrees):\n  value = math.floor(degrees * 100 * 226 / 10000)\n  if (value > 255):\n    write8(0x08 + num * 4, value - 256)\n    write8(0x08 + num * 4 + 1, 0x01)\n  else:\n    write8(0x08 + num * 4, value)\n    write8(0x08 + num * 4 + 1, 0x00)\n\ndef setAngle(angle,time):\n  step=[0,0,0,0,0,0,0,0]\n  time/=5\n  for i in range(8):\n    target = ServoDefaultValue[i] - angle[i]\n    if(target != ServoCurrentValue[i]):\n      step[i]=(target-ServoCurrentValue[i])/time\n  for n in range(time):\n    for m in range(8):\n      ServoCurrentValue[m]+=step[m]\n      servoWrite(m,ServoCurrentValue[m]/10)\n    wait_ms(1)\n  global MotionCount\n  MotionCount+=1\n\n\nwrite8(0xFE, 0x85)\nwrite8(0xFA, 0x00)\nwrite8(0xFB, 0x00)\nwrite8(0xFC, 0x66)\nwrite8(0xFD, 0x00)\nwrite8(0x00, 0x01)\nsetAngle([0, 0, 0, 0, 0, 0, 0, 0], 10)\n\ndef MotionStart(MotionNumber):\n    global MotionCount\n\n    #キャッシュされているか確認\n    Cache = \"\"\n    for i in range(len(MotionCache) / 2):\n      if(int(MotionCache[i * 2]) == MotionNumber):\n        Cache = MotionCache[i * 2 + 1]\n        break\n\n    if(Cache == \"\"):\n      ReadByteFrom = 50 + 860 * MotionNumber\n      #モーションデータの読み取り\n      _data = bytearray(2)\n      _data[0] = ReadByteFrom >> 8\n      _data[1] = ReadByteFrom & 0xFF\n      i2c.writeto(0x56, _data)\n      ReadData = i2c.readfrom(0x56, 860)\n      MotionCache.append(str(MotionNumber))\n      MotionCache.append(str(ReadData))\n    else:\n      ReadData = Cache\n\n    #モーションデータの切り出し\n    MotionDataArray = str(ReadData).split('>')\n    TransitionTimeArray = []\n    SearvoArray = []\n\n    for i in MotionDataArray:\n      if(re.match('^MF',i)):\n        check1=re.match('(MF....)(....)',i)\n        TransitionTimeArray.append(int(check1.group(2),16))\n        for n in range(8):\n          check2 = i[10+4*n:10+4*n+4]\n          if(int(check2,16) > 3600):\n            SearvoArray.append(int(check2, 16) - pow(16, len(check2)))\n          else:\n            SearvoArray.append(int(check2,16))\n\n    #サーボモーターを動かす\n    ErrorFlag = False\n    while MotionCount != len(TransitionTimeArray):\n      SearvoArrayCheck = []\n      for i in range(8):\n        count1 = 8 * MotionCount + i\n        SearvoArrayCheck.append(SearvoArray[count1])\n      if(SearvoArrayCheck == ServoBeforeValue):\n        #同じサーボ角を繰り返す場合、動作スキップする\n        MotionCount+=1\n      else:\n        MotionCountBefore = MotionCount\n        setAngle(SearvoArrayCheck,TransitionTimeArray[MotionCount])\n        while(MotionCount == MotionCountBefore):\n          wait_ms(1)\n      for i in range(8):\n        ServoBeforeValue[i] = SearvoArrayCheck[i]\n    MotionCount = -1\n#初期化完了まで待つ\nwhile(MotionCount != 1):\n  wait_ms(1)\n#セットアップ完了\n` + \"\\n\";\n};\n\n// Block __PLEN5Stack_Motion\nvar __PLEN5Stack_Motion_json = {\n    \"previousStatement\": null,\n    \"nextStatement\": null,\n    \"message0\": \"%1 %2\",\n    \"args0\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"モーションを再生する\"\n        },\n        {\n            \"type\": \"input_value\",\n            \"name\": \"モーションを再生する\"\n        }\n    ],\n    \"colour\": \"#00a654\"\n};\n\nwindow['Blockly'].Blocks['__PLEN5Stack_Motion'] = {\n    init: function() {\n        this.jsonInit(__PLEN5Stack_Motion_json);\n    }\n};\n\nwindow['Blockly'].Python['__PLEN5Stack_Motion'] = function(block) {\n    var モーションを再生する = Blockly.Python.valueToCode(block, 'モーションを再生する', Blockly.Python.ORDER_NONE);\n    return `MotionCount = 0\nMotionStart(${モーションを再生する})\n#動作完了まで待つ\nwhile(MotionCount != -1):\n  wait_ms(1)` + \"\\n\";\n};\n\n// Block __PLEN5Stack_BasicMotionMemo\nvar __PLEN5Stack_BasicMotionMemo_json = {\n    \"previousStatement\": null,\n    \"nextStatement\": null,\n    \"message0\": \"%1\",\n    \"args0\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"《基本モーション》\"\n        }\n    ],\n    \"message1\": \"%1\",\n    \"args1\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"    70 ◀ 前に進む\"\n        }\n    ],\n    \"message2\": \"%1\",\n    \"args2\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"    71 ◀ 左に回る\"\n        }\n    ],\n    \"message3\": \"%1\",\n    \"args3\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"    72 ◀ 右に回る\"\n        }\n    ],\n    \"message4\": \"%1\",\n    \"args4\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"    73 ◀ 後ろに進む\"\n        }\n    ],\n    \"message5\": \"%1\",\n    \"args5\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"    00 ◀ 左ステップ\"\n        }\n    ],\n    \"message6\": \"%1\",\n    \"args6\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"    01 ◀ 前ステップ\"\n        }\n    ],\n    \"message7\": \"%1\",\n    \"args7\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"    02 ◀ 右ステップ\"\n        }\n    ],\n    \"message8\": \"%1\",\n    \"args8\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"    03 ◀ えっへん\"\n        }\n    ],\n    \"message9\": \"%1\",\n    \"args9\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"    04 ◀ おじぎ\"\n        }\n    ],\n    \"message10\": \"%1\",\n    \"args10\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"    05 ◀ こくはく\"\n        }\n    ],\n    \"message11\": \"%1\",\n    \"args11\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"    06 ◀ ハグ\"\n        }\n    ],\n    \"message12\": \"%1\",\n    \"args12\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"    07 ◀ はくしゅ\"\n        }\n    ],\n    \"message13\": \"%1\",\n    \"args13\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"    08 ◀ ハイタッチ\"\n        }\n    ],\n    \"message14\": \"%1\",\n    \"args14\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"    41 ◀ 腕をバタバタする\"\n        }\n    ],\n    \"colour\": \"#00a654\"\n};\n\nwindow['Blockly'].Blocks['__PLEN5Stack_BasicMotionMemo'] = {\n    init: function() {\n        this.jsonInit(__PLEN5Stack_BasicMotionMemo_json);\n    }\n};\n\nwindow['Blockly'].Python['__PLEN5Stack_BasicMotionMemo'] = function(block) {\n        return `#メモ` + \"\\n\";\n};\n\n// Block __PLEN5Stack_DanceMotionMemo\nvar __PLEN5Stack_DanceMotionMemo_json = {\n    \"previousStatement\": null,\n    \"nextStatement\": null,\n    \"message0\": \"%1\",\n    \"args0\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"《ダンスモーション》\"\n        }\n    ],\n    \"message1\": \"%1\",\n    \"args1\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"    30 ◀ ダンス左ステップ\"\n        }\n    ],\n    \"message2\": \"%1\",\n    \"args2\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"    31 ◀ ダンス前ステップ\"\n        }\n    ],\n    \"message3\": \"%1\",\n    \"args3\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"    32 ◀ ダンス右ステップ\"\n        }\n    ],\n    \"message4\": \"%1\",\n    \"args4\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"    33 ◀ ダンスポーズ\"\n        }\n    ],\n    \"message5\": \"%1\",\n    \"args5\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"    34 ◀ ダンスアップダウン\"\n        }\n    ],\n    \"message6\": \"%1\",\n    \"args6\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"    35 ◀ ダンスくねくね\"\n        }\n    ],\n    \"message7\": \"%1\",\n    \"args7\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"    36 ◀ ダンス後ろステップ\"\n        }\n    ],\n    \"message8\": \"%1\",\n    \"args8\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"    37 ◀ ダンスおじぎ\"\n        }\n    ],\n    \"message9\": \"%1\",\n    \"args9\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"    38 ◀ ダンスツイスト\"\n        }\n    ],\n    \"colour\": \"#00a654\"\n};\n\nwindow['Blockly'].Blocks['__PLEN5Stack_DanceMotionMemo'] = {\n    init: function() {\n        this.jsonInit(__PLEN5Stack_DanceMotionMemo_json);\n    }\n};\n\nwindow['Blockly'].Python['__PLEN5Stack_DanceMotionMemo'] = function(block) {\n        return `#メモ` + \"\\n\";\n};\n\n// Block __PLEN5Stack_SoccerMotionMemo\nvar __PLEN5Stack_SoccerMotionMemo_json = {\n    \"previousStatement\": null,\n    \"nextStatement\": null,\n    \"message0\": \"%1\",\n    \"args0\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"《サッカーモーション》\"\n        }\n    ],\n    \"message1\": \"%1\",\n    \"args1\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"    20 ◀ 左ディフェンス\"\n        }\n    ],\n    \"message2\": \"%1\",\n    \"args2\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"    21 ◀ ドリブル\"\n        }\n    ],\n    \"message3\": \"%1\",\n    \"args3\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"    22 ◀ 右ディフェンス\"\n        }\n    ],\n    \"message4\": \"%1\",\n    \"args4\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"    23 ◀ 左キック\"\n        }\n    ],\n    \"message5\": \"%1\",\n    \"args5\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"    24 ◀ ダッシュ\"\n        }\n    ],\n    \"message6\": \"%1\",\n    \"args6\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"    25 ◀ 右キック\"\n        }\n    ],\n    \"message7\": \"%1\",\n    \"args7\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"    26 ◀ 左パス\"\n        }\n    ],\n    \"message8\": \"%1\",\n    \"args8\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"    27 ◀ パスちょうだい\"\n        }\n    ],\n    \"message9\": \"%1\",\n    \"args9\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"    28 ◀ 右パス\"\n        }\n    ],\n    \"colour\": \"#00a654\"\n};\n\nwindow['Blockly'].Blocks['__PLEN5Stack_SoccerMotionMemo'] = {\n    init: function() {\n        this.jsonInit(__PLEN5Stack_SoccerMotionMemo_json);\n    }\n};\n\nwindow['Blockly'].Python['__PLEN5Stack_SoccerMotionMemo'] = function(block) {\n        return `#メモ` + \"\\n\";\n};\n\n// Block __PLEN5Stack_Servo\nvar __PLEN5Stack_Servo_json = {\n    \"previousStatement\": null,\n    \"nextStatement\": null,\n    \"message0\": \"%1\",\n    \"args0\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"サーボモーターの角度を変更する (0~7) [deg] [msec]\"\n        }\n    ],\n    \"message1\": \"%1 %2\",\n    \"args1\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"ServoNumber\"\n        },\n        {\n            \"type\": \"input_value\",\n            \"name\": \"ServoNumber\"\n        }\n    ],\n    \"message2\": \"%1 %2\",\n    \"args2\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"Angle\"\n        },\n        {\n            \"type\": \"input_value\",\n            \"name\": \"Angle\"\n        }\n    ],\n    \"message3\": \"%1 %2\",\n    \"args3\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"Time\"\n        },\n        {\n            \"type\": \"input_value\",\n            \"name\": \"Time\"\n        }\n    ],\n    \"message4\": \"%1\",\n    \"args4\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \" \"\n        }\n    ],\n    \"colour\": \"#00a654\"\n};\n\nwindow['Blockly'].Blocks['__PLEN5Stack_Servo'] = {\n    init: function() {\n        this.jsonInit(__PLEN5Stack_Servo_json);\n    }\n};\n\nwindow['Blockly'].Python['__PLEN5Stack_Servo'] = function(block) {\n    var ServoNumber = Blockly.Python.valueToCode(block, 'ServoNumber', Blockly.Python.ORDER_NONE);\nvar Angle = Blockly.Python.valueToCode(block, 'Angle', Blockly.Python.ORDER_NONE);\nvar Time = Blockly.Python.valueToCode(block, 'Time', Blockly.Python.ORDER_NONE);\n    return `ServoAngleArray = []\nfor i in range(8):\n  if(i == ${ServoNumber}):\n    ServoAngleArray.append(${Angle}*10)\n  else:\n    ServoAngleArray.append(0)\nsetAngle(ServoAngleArray,${Time})\n` + \"\\n\";\n};\n\n// Block __PLEN5Stack_BothLED\nvar __PLEN5Stack_BothLED_json = {\n    \"previousStatement\": null,\n    \"nextStatement\": null,\n    \"message0\": \"%1\",\n    \"args0\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"両目LEDの輝度を設定する (0~255)\"\n        }\n    ],\n    \"message1\": \"%1 %2\",\n    \"args1\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"R\"\n        },\n        {\n            \"type\": \"input_value\",\n            \"name\": \"R\"\n        }\n    ],\n    \"message2\": \"%1 %2\",\n    \"args2\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"G\"\n        },\n        {\n            \"type\": \"input_value\",\n            \"name\": \"G\"\n        }\n    ],\n    \"message3\": \"%1 %2\",\n    \"args3\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"B\"\n        },\n        {\n            \"type\": \"input_value\",\n            \"name\": \"B\"\n        }\n    ],\n    \"message4\": \"%1\",\n    \"args4\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \" \"\n        }\n    ],\n    \"colour\": \"#00a654\"\n};\n\nwindow['Blockly'].Blocks['__PLEN5Stack_BothLED'] = {\n    init: function() {\n        this.jsonInit(__PLEN5Stack_BothLED_json);\n    }\n};\n\nwindow['Blockly'].Python['__PLEN5Stack_BothLED'] = function(block) {\n    var R = Blockly.Python.valueToCode(block, 'R', Blockly.Python.ORDER_NONE);\nvar G = Blockly.Python.valueToCode(block, 'G', Blockly.Python.ORDER_NONE);\nvar B = Blockly.Python.valueToCode(block, 'B', Blockly.Python.ORDER_NONE);\n    return `CurrentLEDValue[0] = [${G}, ${R}, ${B}]\nCurrentLEDValue[1] = [${G}, ${R}, ${B}]\nnp[0] = CurrentLEDValue[0]\nnp[1] = CurrentLEDValue[1]\nnp.write()\n` + \"\\n\";\n};\n\n// Block __PLEN5Stack_RightLED\nvar __PLEN5Stack_RightLED_json = {\n    \"previousStatement\": null,\n    \"nextStatement\": null,\n    \"message0\": \"%1\",\n    \"args0\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"右目LEDの輝度を設定する (0~255)\"\n        }\n    ],\n    \"message1\": \"%1 %2\",\n    \"args1\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"R\"\n        },\n        {\n            \"type\": \"input_value\",\n            \"name\": \"R\"\n        }\n    ],\n    \"message2\": \"%1 %2\",\n    \"args2\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"G\"\n        },\n        {\n            \"type\": \"input_value\",\n            \"name\": \"G\"\n        }\n    ],\n    \"message3\": \"%1 %2\",\n    \"args3\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"B\"\n        },\n        {\n            \"type\": \"input_value\",\n            \"name\": \"B\"\n        }\n    ],\n    \"message4\": \"%1\",\n    \"args4\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \" \"\n        }\n    ],\n    \"colour\": \"#00a654\"\n};\n\nwindow['Blockly'].Blocks['__PLEN5Stack_RightLED'] = {\n    init: function() {\n        this.jsonInit(__PLEN5Stack_RightLED_json);\n    }\n};\n\nwindow['Blockly'].Python['__PLEN5Stack_RightLED'] = function(block) {\n    var R = Blockly.Python.valueToCode(block, 'R', Blockly.Python.ORDER_NONE);\nvar G = Blockly.Python.valueToCode(block, 'G', Blockly.Python.ORDER_NONE);\nvar B = Blockly.Python.valueToCode(block, 'B', Blockly.Python.ORDER_NONE);\n    return `CurrentLEDValue[0] = [${G}, ${R}, ${B}]\nnp[0] = CurrentLEDValue[0]\nnp[1] = CurrentLEDValue[1]\nnp.write()\n` + \"\\n\";\n};\n\n// Block __PLEN5Stack_LeftLED\nvar __PLEN5Stack_LeftLED_json = {\n    \"previousStatement\": null,\n    \"nextStatement\": null,\n    \"message0\": \"%1\",\n    \"args0\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"左目LEDの輝度を設定する (0~255)\"\n        }\n    ],\n    \"message1\": \"%1 %2\",\n    \"args1\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"R\"\n        },\n        {\n            \"type\": \"input_value\",\n            \"name\": \"R\"\n        }\n    ],\n    \"message2\": \"%1 %2\",\n    \"args2\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"G\"\n        },\n        {\n            \"type\": \"input_value\",\n            \"name\": \"G\"\n        }\n    ],\n    \"message3\": \"%1 %2\",\n    \"args3\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"B\"\n        },\n        {\n            \"type\": \"input_value\",\n            \"name\": \"B\"\n        }\n    ],\n    \"message4\": \"%1\",\n    \"args4\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \" \"\n        }\n    ],\n    \"colour\": \"#00a654\"\n};\n\nwindow['Blockly'].Blocks['__PLEN5Stack_LeftLED'] = {\n    init: function() {\n        this.jsonInit(__PLEN5Stack_LeftLED_json);\n    }\n};\n\nwindow['Blockly'].Python['__PLEN5Stack_LeftLED'] = function(block) {\n    var R = Blockly.Python.valueToCode(block, 'R', Blockly.Python.ORDER_NONE);\nvar G = Blockly.Python.valueToCode(block, 'G', Blockly.Python.ORDER_NONE);\nvar B = Blockly.Python.valueToCode(block, 'B', Blockly.Python.ORDER_NONE);\n    return `CurrentLEDValue[1] = [${G}, ${R}, ${B}]\nnp[0] = CurrentLEDValue[0]\nnp[1] = CurrentLEDValue[1]\nnp.write()` + \"\\n\";\n};\n\n","code":{"Setup":["window['Blockly'].Python['__PLEN5Stack_Setup'] = function(block) {\n        return `#インポート\nfrom machine import Pin, I2C\nimport re\nimport math\nimport machine, neopixel\n\n#変数の定義\nServoDefaultValue = [1400, 1060, 780, 1080, 680, 1050, 1500, 1220] #標準よりもずれている(?)\n#ServoDefaultValue = [1000, 630, 300, 600, 240, 600, 1000, 720]\nMotionCache = []\nCurrentLEDValue = [(0,0,0),(0,0,0)]\nServoCurrentValue = [0] * 8\nServoBeforeValue = [0] * 8\ni2c = I2C(scl=Pin(22), sda=Pin(21), freq=400000)\nnp = neopixel.NeoPixel(machine.Pin(26), 2)\nglobal MotionCount\nMotionCount = 0\n\nfor i in range(8):\n  ServoCurrentValue[i] = ServoDefaultValue[i]\n\n#関数の定義\ndef write8(addr, value):\n  cmd = bytearray(2)\n  cmd[0] = addr\n  cmd[1] = value\n  i2c.writeto(0x6A, cmd)\n\ndef servoWrite(num, degrees):\n  value = math.floor(degrees * 100 * 226 / 10000)\n  if (value > 255):\n    write8(0x08 + num * 4, value - 256)\n    write8(0x08 + num * 4 + 1, 0x01)\n  else:\n    write8(0x08 + num * 4, value)\n    write8(0x08 + num * 4 + 1, 0x00)\n\ndef setAngle(angle,time):\n  step=[0,0,0,0,0,0,0,0]\n  time/=5\n  for i in range(8):\n    target = ServoDefaultValue[i] - angle[i]\n    if(target != ServoCurrentValue[i]):\n      step[i]=(target-ServoCurrentValue[i])/time\n  for n in range(time):\n    for m in range(8):\n      ServoCurrentValue[m]+=step[m]\n      servoWrite(m,ServoCurrentValue[m]/10)\n    wait_ms(1)\n  global MotionCount\n  MotionCount+=1\n\n\nwrite8(0xFE, 0x85)\nwrite8(0xFA, 0x00)\nwrite8(0xFB, 0x00)\nwrite8(0xFC, 0x66)\nwrite8(0xFD, 0x00)\nwrite8(0x00, 0x01)\nsetAngle([0, 0, 0, 0, 0, 0, 0, 0], 10)\n\ndef MotionStart(MotionNumber):\n    global MotionCount\n\n    #キャッシュされているか確認\n    Cache = \"\"\n    for i in range(len(MotionCache) / 2):\n      if(int(MotionCache[i * 2]) == MotionNumber):\n        Cache = MotionCache[i * 2 + 1]\n        break\n\n    if(Cache == \"\"):\n      ReadByteFrom = 50 + 860 * MotionNumber\n      #モーションデータの読み取り\n      _data = bytearray(2)\n      _data[0] = ReadByteFrom >> 8\n      _data[1] = ReadByteFrom & 0xFF\n      i2c.writeto(0x56, _data)\n      ReadData = i2c.readfrom(0x56, 860)\n      MotionCache.append(str(MotionNumber))\n      MotionCache.append(str(ReadData))\n    else:\n      ReadData = Cache\n\n    #モーションデータの切り出し\n    MotionDataArray = str(ReadData).split('>')\n    TransitionTimeArray = []\n    SearvoArray = []\n\n    for i in MotionDataArray:\n      if(re.match('^MF',i)):\n        check1=re.match('(MF....)(....)',i)\n        TransitionTimeArray.append(int(check1.group(2),16))\n        for n in range(8):\n          check2 = i[10+4*n:10+4*n+4]\n          if(int(check2,16) > 3600):\n            SearvoArray.append(int(check2, 16) - pow(16, len(check2)))\n          else:\n            SearvoArray.append(int(check2,16))\n\n    #サーボモーターを動かす\n    ErrorFlag = False\n    while MotionCount != len(TransitionTimeArray):\n      SearvoArrayCheck = []\n      for i in range(8):\n        count1 = 8 * MotionCount + i\n        SearvoArrayCheck.append(SearvoArray[count1])\n      if(SearvoArrayCheck == ServoBeforeValue):\n        #同じサーボ角を繰り返す場合、動作スキップする\n        MotionCount+=1\n      else:\n        MotionCountBefore = MotionCount\n        setAngle(SearvoArrayCheck,TransitionTimeArray[MotionCount])\n        while(MotionCount == MotionCountBefore):\n          wait_ms(1)\n      for i in range(8):\n        ServoBeforeValue[i] = SearvoArrayCheck[i]\n    MotionCount = -1\n#初期化完了まで待つ\nwhile(MotionCount != 1):\n  wait_ms(1)\n#セットアップ完了\n` + \"\\n\";\n};\n\n","#インポート\nfrom machine import Pin, I2C\nimport re\nimport math\nimport machine, neopixel\n\n#変数の定義\nServoDefaultValue = [1400, 1060, 780, 1080, 680, 1050, 1500, 1220] #標準よりもずれている(?)\n#ServoDefaultValue = [1000, 630, 300, 600, 240, 600, 1000, 720]\nMotionCache = []\nCurrentLEDValue = [(0,0,0),(0,0,0)]\nServoCurrentValue = [0] * 8\nServoBeforeValue = [0] * 8\ni2c = I2C(scl=Pin(22), sda=Pin(21), freq=400000)\nnp = neopixel.NeoPixel(machine.Pin(26), 2)\nglobal MotionCount\nMotionCount = 0\n\nfor i in range(8):\n  ServoCurrentValue[i] = ServoDefaultValue[i]\n\n#関数の定義\ndef write8(addr, value):\n  cmd = bytearray(2)\n  cmd[0] = addr\n  cmd[1] = value\n  i2c.writeto(0x6A, cmd)\n\ndef servoWrite(num, degrees):\n  value = math.floor(degrees * 100 * 226 / 10000)\n  if (value > 255):\n    write8(0x08 + num * 4, value - 256)\n    write8(0x08 + num * 4 + 1, 0x01)\n  else:\n    write8(0x08 + num * 4, value)\n    write8(0x08 + num * 4 + 1, 0x00)\n\ndef setAngle(angle,time):\n  step=[0,0,0,0,0,0,0,0]\n  time/=5\n  for i in range(8):\n    target = ServoDefaultValue[i] - angle[i]\n    if(target != ServoCurrentValue[i]):\n      step[i]=(target-ServoCurrentValue[i])/time\n  for n in range(time):\n    for m in range(8):\n      ServoCurrentValue[m]+=step[m]\n      servoWrite(m,ServoCurrentValue[m]/10)\n    wait_ms(1)\n  global MotionCount\n  MotionCount+=1\n\n\nwrite8(0xFE, 0x85)\nwrite8(0xFA, 0x00)\nwrite8(0xFB, 0x00)\nwrite8(0xFC, 0x66)\nwrite8(0xFD, 0x00)\nwrite8(0x00, 0x01)\nsetAngle([0, 0, 0, 0, 0, 0, 0, 0], 10)\n\ndef MotionStart(MotionNumber):\n    global MotionCount\n\n    #キャッシュされているか確認\n    Cache = \"\"\n    for i in range(len(MotionCache) / 2):\n      if(int(MotionCache[i * 2]) == MotionNumber):\n        Cache = MotionCache[i * 2 + 1]\n        break\n\n    if(Cache == \"\"):\n      ReadByteFrom = 50 + 860 * MotionNumber\n      #モーションデータの読み取り\n      _data = bytearray(2)\n      _data[0] = ReadByteFrom >> 8\n      _data[1] = ReadByteFrom & 0xFF\n      i2c.writeto(0x56, _data)\n      ReadData = i2c.readfrom(0x56, 860)\n      MotionCache.append(str(MotionNumber))\n      MotionCache.append(str(ReadData))\n    else:\n      ReadData = Cache\n\n    #モーションデータの切り出し\n    MotionDataArray = str(ReadData).split('>')\n    TransitionTimeArray = []\n    SearvoArray = []\n\n    for i in MotionDataArray:\n      if(re.match('^MF',i)):\n        check1=re.match('(MF....)(....)',i)\n        TransitionTimeArray.append(int(check1.group(2),16))\n        for n in range(8):\n          check2 = i[10+4*n:10+4*n+4]\n          if(int(check2,16) > 3600):\n            SearvoArray.append(int(check2, 16) - pow(16, len(check2)))\n          else:\n            SearvoArray.append(int(check2,16))\n\n    #サーボモーターを動かす\n    ErrorFlag = False\n    while MotionCount != len(TransitionTimeArray):\n      SearvoArrayCheck = []\n      for i in range(8):\n        count1 = 8 * MotionCount + i\n        SearvoArrayCheck.append(SearvoArray[count1])\n      if(SearvoArrayCheck == ServoBeforeValue):\n        #同じサーボ角を繰り返す場合、動作スキップする\n        MotionCount+=1\n      else:\n        MotionCountBefore = MotionCount\n        setAngle(SearvoArrayCheck,TransitionTimeArray[MotionCount])\n        while(MotionCount == MotionCountBefore):\n          wait_ms(1)\n      for i in range(8):\n        ServoBeforeValue[i] = SearvoArrayCheck[i]\n    MotionCount = -1\n#初期化完了まで待つ\nwhile(MotionCount != 1):\n  wait_ms(1)\n#セットアップ完了\n"],"Motion":["window['Blockly'].Python['__PLEN5Stack_Motion'] = function(block) {\n    var モーションを再生する = Blockly.Python.valueToCode(block, 'モーションを再生する', Blockly.Python.ORDER_NONE);\n    return `MotionCount = 0\nMotionStart(${モーションを再生する})\n#動作完了まで待つ\nwhile(MotionCount != -1):\n  wait_ms(1)` + \"\\n\";\n};\n\n","MotionCount = 0\nMotionStart(${モーションを再生する})\n#動作完了まで待つ\nwhile(MotionCount != -1):\n  wait_ms(1)"],"BasicMotionMemo":["window['Blockly'].Python['__PLEN5Stack_BasicMotionMemo'] = function(block) {\n        return `#メモ` + \"\\n\";\n};\n\n","#メモ"],"DanceMotionMemo":["window['Blockly'].Python['__PLEN5Stack_DanceMotionMemo'] = function(block) {\n        return `#メモ` + \"\\n\";\n};\n\n","#メモ"],"SoccerMotionMemo":["window['Blockly'].Python['__PLEN5Stack_SoccerMotionMemo'] = function(block) {\n        return `#メモ` + \"\\n\";\n};\n\n","#メモ"],"Servo":["window['Blockly'].Python['__PLEN5Stack_Servo'] = function(block) {\n    var ServoNumber = Blockly.Python.valueToCode(block, 'ServoNumber', Blockly.Python.ORDER_NONE);\nvar Angle = Blockly.Python.valueToCode(block, 'Angle', Blockly.Python.ORDER_NONE);\nvar Time = Blockly.Python.valueToCode(block, 'Time', Blockly.Python.ORDER_NONE);\n    return `ServoAngleArray = []\nfor i in range(8):\n  if(i == ${ServoNumber}):\n    ServoAngleArray.append(${Angle}*10)\n  else:\n    ServoAngleArray.append(0)\nsetAngle(ServoAngleArray,${Time})\n` + \"\\n\";\n};\n\n","ServoAngleArray = []\nfor i in range(8):\n  if(i == ${ServoNumber}):\n    ServoAngleArray.append(${Angle}*10)\n  else:\n    ServoAngleArray.append(0)\nsetAngle(ServoAngleArray,${Time})\n"],"BothLED":["window['Blockly'].Python['__PLEN5Stack_BothLED'] = function(block) {\n    var R = Blockly.Python.valueToCode(block, 'R', Blockly.Python.ORDER_NONE);\nvar G = Blockly.Python.valueToCode(block, 'G', Blockly.Python.ORDER_NONE);\nvar B = Blockly.Python.valueToCode(block, 'B', Blockly.Python.ORDER_NONE);\n    return `CurrentLEDValue[0] = [${G}, ${R}, ${B}]\nCurrentLEDValue[1] = [${G}, ${R}, ${B}]\nnp[0] = CurrentLEDValue[0]\nnp[1] = CurrentLEDValue[1]\nnp.write()\n` + \"\\n\";\n};\n\n","CurrentLEDValue[0] = [${G}, ${R}, ${B}]\nCurrentLEDValue[1] = [${G}, ${R}, ${B}]\nnp[0] = CurrentLEDValue[0]\nnp[1] = CurrentLEDValue[1]\nnp.write()\n"],"RightLED":["window['Blockly'].Python['__PLEN5Stack_RightLED'] = function(block) {\n    var R = Blockly.Python.valueToCode(block, 'R', Blockly.Python.ORDER_NONE);\nvar G = Blockly.Python.valueToCode(block, 'G', Blockly.Python.ORDER_NONE);\nvar B = Blockly.Python.valueToCode(block, 'B', Blockly.Python.ORDER_NONE);\n    return `CurrentLEDValue[0] = [${G}, ${R}, ${B}]\nnp[0] = CurrentLEDValue[0]\nnp[1] = CurrentLEDValue[1]\nnp.write()\n` + \"\\n\";\n};\n\n","CurrentLEDValue[0] = [${G}, ${R}, ${B}]\nnp[0] = CurrentLEDValue[0]\nnp[1] = CurrentLEDValue[1]\nnp.write()\n"],"LeftLED":["window['Blockly'].Python['__PLEN5Stack_LeftLED'] = function(block) {\n    var R = Blockly.Python.valueToCode(block, 'R', Blockly.Python.ORDER_NONE);\nvar G = Blockly.Python.valueToCode(block, 'G', Blockly.Python.ORDER_NONE);\nvar B = Blockly.Python.valueToCode(block, 'B', Blockly.Python.ORDER_NONE);\n    return `CurrentLEDValue[1] = [${G}, ${R}, ${B}]\nnp[0] = CurrentLEDValue[0]\nnp[1] = CurrentLEDValue[1]\nnp.write()` + \"\\n\";\n};\n\n","CurrentLEDValue[1] = [${G}, ${R}, ${B}]\nnp[0] = CurrentLEDValue[0]\nnp[1] = CurrentLEDValue[1]\nnp.write()"]}}